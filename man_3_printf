.TH _printf 3 "29 October 2019" "Version 1.0" "User Manual Page"
.SH NAME
.B _printf 
- formatted output conversion
.SH SYNOPSIS
#include "holberton.h"
.PP
int _printf(const char *format, ...);
.SH DESCRIPTION
The _printf function produces output according to conversion specifiers.  It will write to standard output.
.PP
.B Return value
.PP
Upon successful return, the function returns the number of characters printed excluding the null byte used to end output to strings.  If an output error occurs, return -1.
.PP
.B Format of the format string
.PP
The format string is a character string that begins with the percent characer, % and ends with a conversion specifier.  If necessary, there are optional specifiers that could be applied to the format string.  They would go in between the % and conversion specifier.  These optional specifiers would appear in this order: flags, field width, precision and length modifier.
.PP
.B % [flags][field width][.precision][length modifier] conversion specifier
.SH OPTIONS
.B The flag characters 
precedences with the percent character, % followed by zero or more of the following flags:
.PP
.RS
.B 0
.PP
For d, i, o, u, x and X conversion specifiers, the converted value will be left padded with zeros.  It is dependent on field width to determine the number of zeros for padding.
.PP
.B -
.PP
For any conversion specifier, the converted value will be left justified and padded with spaces.  It is dependent on field width to determine the number of spaces for padding.
.PP
.B #
.PP
For o, x and X conversion specifiers, the converted value will append 0, 0x and 0X to the front, respectively.
.PP
.B +
.PP
For d and i conversion specifiers only.  If the converted value is positive, the plus character will be padded at the front.  If the converted value is negative, the minus character will be padded at the front.
.PP
.B space
.PP
For d and i conversion specifiers only.  If the converted value is positive, it will be space padded.  If the converted value is negative, the minus charcter will be padded at the front.
.PP
.RE
.B The field width
.PP
.RS
A decimal digit string where the first digit is not a zero specifies a minimum field width.  If the field width is less than the length of the converted value, then the converted value will print as is.  If the converted value length is less than the field width, it will be padded with spaces on the left.  If the flag character, - is present, then the converted value will be padded with spaces to the right.  If the flag character, 0 is present, then the converted value will be padded with zero to the left. 
.RE
.PP
.B The precision
.PP
.RS
For f conversion specifier only.  The period character, '.' is used to determine the number of digits to print.  If only '.' or negative is given, the precision will be zero.  If nothing is specified, i.e., %f, then the converted value will default to print 6 digits after the decimal point.
.RE
.PP
.B The length modifier 
will change the length of the converted value.
.PP
.RS
.B h
.PP
When used with d and i conversion specifiers, the converted value will be a short integer.  When used with u, o, x and X conversion specifiers, the converted value will be an unsigned short integer.
.PP
.B l
.PP
When used with d and i conversion specifiers, the converted value will be a long integer.  When used with u, o, x and X conversion specifiers, the converted value will be an unsigned long integer.
.PP
.RE
.B Conversion specifiers
.PP
.RS
.B c
.PP
A single character will be printed.  It is incompatible with flag characters: #, + and space.
.PP
.B s
.PP
An entire string of characters will be printed.  It is incompatible with flag characters: #, + and space.
.PP
.B %
.PP
No conversion occurs.  The percent character, % will be printed.
.PP
.B p
.PP
A memory address of a pointer argument will be printed in hexadecimal.
.PP
.B S
.PP
An entire string of characters will be printed.  The characters, \x followed by the ASCII value in hexadecimal (2 uppercase characters) will be printed for any ASCII value between 0 and 32 or 127 and above.
.PP
.B r
.PP
An entire string of characters will be printed in reverse.
.PP
.B R
.PP
An entire string of characters will be printed in ROT13.  An alphabetic character replaces a letter with the 13th letter after it.  For example, applying ROT13 to "HELLO" will print "URYYB".
.PP
.B d, i
.PP
An int will convert to a signed base 10 decimal.  If needed, can also convert base 8 octal or base 16 hexadecimal.  It is incompatible with flag character, #.
.PP
.B o, u, x, X
.PP
An unsigned int converts to the following unsigned: 
.PP
.RS
base 8 octal represented by o
.PP
base 10 decimal represented by u
.PP
base 16 hexadecimal represented by x for lowercase or X for uppercase
.RE
.RE
.SH SEE ALSO
.I printf(3)
.SH BUGS
No known bugs.
.SH AUTHORS
Michelle Giraldo, Jennifer Tang
